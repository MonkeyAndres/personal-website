---
const { chart } = Astro.props
---

<div class="mermaid-container" data-mermaid={chart}></div>

<script>
  import mermaid from 'mermaid'

  const initializeMermaid = (theme: 'dark' | 'default') => {
    mermaid.initialize({
      startOnLoad: false,
      theme: theme,
      logLevel: 'error',
      securityLevel: 'loose',
      htmlLabels: true,
      flowchart: { htmlLabels: true },
      themeVariables: {
        // Customize theme colors here if needed
        primaryColor: theme === 'dark' ? '#8dd3c7' : '#66c2a5',
        lineColor: theme === 'dark' ? '#d3d3d3' : '#333333',
        textColor: theme === 'dark' ? '#ffffff' : '#333333',
      },
    })
  }

  const renderMermaidDiagrams = async () => {
    const mermaidContainers = document.querySelectorAll('.mermaid-container')
    console.log(`Found ${mermaidContainers.length} Mermaid containers`)

    mermaidContainers.forEach(async (container: any, index) => {
      const content = container.dataset.mermaid

      try {
        const { svg } = await mermaid.render(`mermaid-${index}`, content)
        container.innerHTML = svg
      } catch (error) {
        if (error instanceof Error) {
          console.error(`Error rendering Mermaid diagram ${index}:`, error)
          container.innerHTML = `<p>Error rendering graph: ${error.message}</p>`
        }
      }
    })
  }

  const updateTheme = (darkMode: boolean) => {
    const theme = darkMode ? 'dark' : 'default'
    initializeMermaid(theme)
    renderMermaidDiagrams()
  }

  document.addEventListener('DOMContentLoaded', () => {
    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)')
    updateTheme(darkModeMediaQuery.matches)

    darkModeMediaQuery.addEventListener('change', (e) => {
      updateTheme(e.matches)
    })
  })
</script>

<style>
  .mermaid-container {
    width: 100%;
    min-height: 15cqw;
    overflow: auto;
  }
</style>
